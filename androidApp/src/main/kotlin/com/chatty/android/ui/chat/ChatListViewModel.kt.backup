package com.chatty.android.ui.chat

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.chatty.data.remote.ChatApiClient
import com.chatty.data.remote.WebSocketConnectionState
import com.chatty.domain.model.ChatRoom
import com.chatty.domain.repository.ChatRoomRepository
import com.chatty.domain.usecase.ObserveRoomsUseCase
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

data class ChatListUiState(
    val rooms: List<ChatRoom> = emptyList(),
    val isLoading: Boolean = false,
    val error: String? = null
)

class ChatListViewModel(
    private val observeRoomsUseCase: ObserveRoomsUseCase,
    private val apiClient: ChatApiClient,
    private val roomRepository: ChatRoomRepository  // ‚úÖ Add dependency for manual refresh
) : ViewModel() {
    
    private val _uiState = MutableStateFlow(ChatListUiState())
    val uiState: StateFlow<ChatListUiState> = _uiState.asStateFlow()
    
    init {
        // Connect WebSocket when entering chat list (in case user bypassed login with saved token)
        viewModelScope.launch {
            println("üîå ChatListViewModel: Ensuring WebSocket is connected...")
            apiClient.connectWebSocket()
        }
        loadRooms()
        
        // ‚úÖ NEW: Periodic refresh fallback (every 30 seconds)
        viewModelScope.launch {
            while (true) {
                delay(30_000)  // 30 seconds
                if (apiClient.connectionState.value != WebSocketConnectionState.CONNECTED) {
                    println("‚ö†Ô∏è WebSocket disconnected, manually refreshing rooms...")
                    refreshRooms()
                }
            }
        }
    }
    
    private fun loadRooms() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isLoading = true)
            
            try {
                observeRoomsUseCase()
                    .collect { rooms ->
                        _uiState.value = _uiState.value.copy(
                            rooms = rooms,
                            isLoading = false,
                            error = null
                        )
                    }
            } catch (error: Exception) {
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    error = error.message ?: "Failed to load chats"
                )
            }
        }
    }
    
    fun retry() {
        loadRooms()
    }
    
    private fun refreshRooms() {
        viewModelScope.launch {
            roomRepository.getRooms()
                .onSuccess { println("‚úÖ Rooms refreshed successfully") }
                .onFailure { println("‚ùå Failed to refresh rooms: ${it.message}") }
        }
    }
}
